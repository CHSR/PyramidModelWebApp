//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pyramid.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PyramidContext : DbContext
    {
        public PyramidContext()
            : base("name=PyramidContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ASQSE> ASQSE { get; set; }
        public virtual DbSet<BehaviorIncident> BehaviorIncident { get; set; }
        public virtual DbSet<BenchmarkOfQuality> BenchmarkOfQuality { get; set; }
        public virtual DbSet<BenchmarkOfQualityFCC> BenchmarkOfQualityFCC { get; set; }
        public virtual DbSet<Child> Child { get; set; }
        public virtual DbSet<ChildClassroom> ChildClassroom { get; set; }
        public virtual DbSet<ChildNote> ChildNote { get; set; }
        public virtual DbSet<ChildProgram> ChildProgram { get; set; }
        public virtual DbSet<ChildStatus> ChildStatus { get; set; }
        public virtual DbSet<Classroom> Classroom { get; set; }
        public virtual DbSet<CodeActivity> CodeActivity { get; set; }
        public virtual DbSet<CodeAdminFollowUp> CodeAdminFollowUp { get; set; }
        public virtual DbSet<CodeASQSEInterval> CodeASQSEInterval { get; set; }
        public virtual DbSet<CodeChildLeaveReason> CodeChildLeaveReason { get; set; }
        public virtual DbSet<CodeChildStatus> CodeChildStatus { get; set; }
        public virtual DbSet<CodeDischargeReason> CodeDischargeReason { get; set; }
        public virtual DbSet<CodeEthnicity> CodeEthnicity { get; set; }
        public virtual DbSet<CodeFileUploadType> CodeFileUploadType { get; set; }
        public virtual DbSet<CodeGender> CodeGender { get; set; }
        public virtual DbSet<CodeOthersInvolved> CodeOthersInvolved { get; set; }
        public virtual DbSet<CodeParticipantType> CodeParticipantType { get; set; }
        public virtual DbSet<CodePossibleMotivation> CodePossibleMotivation { get; set; }
        public virtual DbSet<CodeProblemBehavior> CodeProblemBehavior { get; set; }
        public virtual DbSet<CodeProgramType> CodeProgramType { get; set; }
        public virtual DbSet<CodeRace> CodeRace { get; set; }
        public virtual DbSet<CodeScoreType> CodeScoreType { get; set; }
        public virtual DbSet<CodeScreenType> CodeScreenType { get; set; }
        public virtual DbSet<CodeStrategyResponse> CodeStrategyResponse { get; set; }
        public virtual DbSet<CodeTermReason> CodeTermReason { get; set; }
        public virtual DbSet<Cohort> Cohort { get; set; }
        public virtual DbSet<ELMAH_Error> ELMAH_Error { get; set; }
        public virtual DbSet<Hub> Hub { get; set; }
        public virtual DbSet<JobFunction> JobFunction { get; set; }
        public virtual DbSet<LoginHistory> LoginHistory { get; set; }
        public virtual DbSet<Program> Program { get; set; }
        public virtual DbSet<ProgramType> ProgramType { get; set; }
        public virtual DbSet<ScoreASQSE> ScoreASQSE { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<Training> Training { get; set; }
        public virtual DbSet<CodeJobType> CodeJobType { get; set; }
        public virtual DbSet<OtherSEScreen> OtherSEScreen { get; set; }
        public virtual DbSet<CodeProgramRole> CodeProgramRole { get; set; }
        public virtual DbSet<UserProgramRole> UserProgramRole { get; set; }
        public virtual DbSet<CodeTPITOSRedFlag> CodeTPITOSRedFlag { get; set; }
        public virtual DbSet<CodeTPOTRedFlag> CodeTPOTRedFlag { get; set; }
        public virtual DbSet<TPITOSRedFlags> TPITOSRedFlags { get; set; }
        public virtual DbSet<TPOTRedFlags> TPOTRedFlags { get; set; }
        public virtual DbSet<CoachingLog> CoachingLog { get; set; }
        public virtual DbSet<CodeTPOTBehaviorResponse> CodeTPOTBehaviorResponse { get; set; }
        public virtual DbSet<TPOTBehaviorResponses> TPOTBehaviorResponses { get; set; }
        public virtual DbSet<TPITOSParticipant> TPITOSParticipant { get; set; }
        public virtual DbSet<TPOTParticipant> TPOTParticipant { get; set; }
        public virtual DbSet<ReportCatalog> ReportCatalog { get; set; }
        public virtual DbSet<CodeReportCriteriaDefault> CodeReportCriteriaDefault { get; set; }
        public virtual DbSet<CodeReportCriteriaOption> CodeReportCriteriaOption { get; set; }
        public virtual DbSet<CodeEssentialStrategiesUsed> CodeEssentialStrategiesUsed { get; set; }
        public virtual DbSet<TPITOS> TPITOS { get; set; }
        public virtual DbSet<TPOT> TPOT { get; set; }
        public virtual DbSet<CodeNewsEntryType> CodeNewsEntryType { get; set; }
        public virtual DbSet<NewsItem> NewsItem { get; set; }
        public virtual DbSet<NewsEntry> NewsEntry { get; set; }
        public virtual DbSet<UserFileUpload> UserFileUpload { get; set; }
        public virtual DbSet<CodeTPITOSKeyPractice> CodeTPITOSKeyPractice { get; set; }
        public virtual DbSet<CodeTPOTKeyPractice> CodeTPOTKeyPractice { get; set; }
        public virtual DbSet<CodeCoachingLog> CodeCoachingLog { get; set; }
        public virtual DbSet<CodeCustomizationOptionType> CodeCustomizationOptionType { get; set; }
        public virtual DbSet<CodeCustomizationOptionValue> CodeCustomizationOptionValue { get; set; }
        public virtual DbSet<UserCustomizationOption> UserCustomizationOption { get; set; }
        public virtual DbSet<CodeEmployeeLeaveReason> CodeEmployeeLeaveReason { get; set; }
        public virtual DbSet<EmployeeClassroom> EmployeeClassroom { get; set; }
        public virtual DbSet<ProgramEmployee> ProgramEmployee { get; set; }
        public virtual DbSet<CodeTraining> CodeTraining { get; set; }
    
        public virtual ObjectResult<spGetChildStatusHistory_Result> spGetChildStatusHistory(Nullable<int> childPK, Nullable<int> programFK)
        {
            var childPKParameter = childPK.HasValue ?
                new ObjectParameter("ChildPK", childPK) :
                new ObjectParameter("ChildPK", typeof(int));
    
            var programFKParameter = programFK.HasValue ?
                new ObjectParameter("ProgramFK", programFK) :
                new ObjectParameter("ProgramFK", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetChildStatusHistory_Result>("spGetChildStatusHistory", childPKParameter, programFKParameter);
        }
    
        public virtual ObjectResult<spValidateEnrollmentDischargeDates_Result> spValidateEnrollmentDischargeDates(Nullable<int> childPK, Nullable<int> programFK, Nullable<System.DateTime> enrollmentDate, Nullable<System.DateTime> dischargeDate)
        {
            var childPKParameter = childPK.HasValue ?
                new ObjectParameter("ChildPK", childPK) :
                new ObjectParameter("ChildPK", typeof(int));
    
            var programFKParameter = programFK.HasValue ?
                new ObjectParameter("ProgramFK", programFK) :
                new ObjectParameter("ProgramFK", typeof(int));
    
            var enrollmentDateParameter = enrollmentDate.HasValue ?
                new ObjectParameter("EnrollmentDate", enrollmentDate) :
                new ObjectParameter("EnrollmentDate", typeof(System.DateTime));
    
            var dischargeDateParameter = dischargeDate.HasValue ?
                new ObjectParameter("DischargeDate", dischargeDate) :
                new ObjectParameter("DischargeDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spValidateEnrollmentDischargeDates_Result>("spValidateEnrollmentDischargeDates", childPKParameter, programFKParameter, enrollmentDateParameter, dischargeDateParameter);
        }
    
        public virtual ObjectResult<spValidateHireTermDates_Result> spValidateHireTermDates(Nullable<int> programEmployeePK, Nullable<int> programFK, Nullable<System.DateTime> hireDate, Nullable<System.DateTime> termDate)
        {
            var programEmployeePKParameter = programEmployeePK.HasValue ?
                new ObjectParameter("ProgramEmployeePK", programEmployeePK) :
                new ObjectParameter("ProgramEmployeePK", typeof(int));
    
            var programFKParameter = programFK.HasValue ?
                new ObjectParameter("ProgramFK", programFK) :
                new ObjectParameter("ProgramFK", typeof(int));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var termDateParameter = termDate.HasValue ?
                new ObjectParameter("TermDate", termDate) :
                new ObjectParameter("TermDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spValidateHireTermDates_Result>("spValidateHireTermDates", programEmployeePKParameter, programFKParameter, hireDateParameter, termDateParameter);
        }
    
        public virtual ObjectResult<spGetAllTeachersTAs_Result> spGetAllTeachersTAs(string programFKs)
        {
            var programFKsParameter = programFKs != null ?
                new ObjectParameter("ProgramFKs", programFKs) :
                new ObjectParameter("ProgramFKs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllTeachersTAs_Result>("spGetAllTeachersTAs", programFKsParameter);
        }
    
        public virtual ObjectResult<spGetClassroomCountBySubstituteStatus_Result> spGetClassroomCountBySubstituteStatus(string programFKs)
        {
            var programFKsParameter = programFKs != null ?
                new ObjectParameter("ProgramFKs", programFKs) :
                new ObjectParameter("ProgramFKs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetClassroomCountBySubstituteStatus_Result>("spGetClassroomCountBySubstituteStatus", programFKsParameter);
        }
    
        public virtual ObjectResult<spGetAllCoaches_Result> spGetAllCoaches(Nullable<int> programFK, Nullable<System.DateTime> eventDate)
        {
            var programFKParameter = programFK.HasValue ?
                new ObjectParameter("ProgramFK", programFK) :
                new ObjectParameter("ProgramFK", typeof(int));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCoaches_Result>("spGetAllCoaches", programFKParameter, eventDateParameter);
        }
    
        public virtual ObjectResult<spGetAllObservers_Result> spGetAllObservers(Nullable<int> programFK, Nullable<System.DateTime> eventDate, string includedTrainings)
        {
            var programFKParameter = programFK.HasValue ?
                new ObjectParameter("ProgramFK", programFK) :
                new ObjectParameter("ProgramFK", typeof(int));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var includedTrainingsParameter = includedTrainings != null ?
                new ObjectParameter("IncludedTrainings", includedTrainings) :
                new ObjectParameter("IncludedTrainings", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllObservers_Result>("spGetAllObservers", programFKParameter, eventDateParameter, includedTrainingsParameter);
        }
    
        public virtual ObjectResult<spValidateTPITOSParticipants_Result> spValidateTPITOSParticipants(Nullable<int> tPITOSPK, Nullable<System.DateTime> observationDate)
        {
            var tPITOSPKParameter = tPITOSPK.HasValue ?
                new ObjectParameter("TPITOSPK", tPITOSPK) :
                new ObjectParameter("TPITOSPK", typeof(int));
    
            var observationDateParameter = observationDate.HasValue ?
                new ObjectParameter("ObservationDate", observationDate) :
                new ObjectParameter("ObservationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spValidateTPITOSParticipants_Result>("spValidateTPITOSParticipants", tPITOSPKParameter, observationDateParameter);
        }
    
        public virtual ObjectResult<spValidateTPOTParticipants_Result> spValidateTPOTParticipants(Nullable<int> tPOTPK, Nullable<System.DateTime> observationDate)
        {
            var tPOTPKParameter = tPOTPK.HasValue ?
                new ObjectParameter("TPOTPK", tPOTPK) :
                new ObjectParameter("TPOTPK", typeof(int));
    
            var observationDateParameter = observationDate.HasValue ?
                new ObjectParameter("ObservationDate", observationDate) :
                new ObjectParameter("ObservationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spValidateTPOTParticipants_Result>("spValidateTPOTParticipants", tPOTPKParameter, observationDateParameter);
        }
    
        public virtual ObjectResult<spGetAllFileUploads_Result> spGetAllFileUploads(string programFKs, Nullable<int> hubFK, Nullable<int> stateFK, string cohortFKs)
        {
            var programFKsParameter = programFKs != null ?
                new ObjectParameter("ProgramFKs", programFKs) :
                new ObjectParameter("ProgramFKs", typeof(string));
    
            var hubFKParameter = hubFK.HasValue ?
                new ObjectParameter("HubFK", hubFK) :
                new ObjectParameter("HubFK", typeof(int));
    
            var stateFKParameter = stateFK.HasValue ?
                new ObjectParameter("StateFK", stateFK) :
                new ObjectParameter("StateFK", typeof(int));
    
            var cohortFKsParameter = cohortFKs != null ?
                new ObjectParameter("CohortFKs", cohortFKs) :
                new ObjectParameter("CohortFKs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllFileUploads_Result>("spGetAllFileUploads", programFKsParameter, hubFKParameter, stateFKParameter, cohortFKsParameter);
        }
    
        public virtual ObjectResult<rspBIRExcel_ProgramInfo_Result> rspBIRExcel_ProgramInfo(string programFKs, Nullable<System.DateTime> schoolYear)
        {
            var programFKsParameter = programFKs != null ?
                new ObjectParameter("ProgramFKs", programFKs) :
                new ObjectParameter("ProgramFKs", typeof(string));
    
            var schoolYearParameter = schoolYear.HasValue ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rspBIRExcel_ProgramInfo_Result>("rspBIRExcel_ProgramInfo", programFKsParameter, schoolYearParameter);
        }
    
        public virtual ObjectResult<spGetCountsForDashboardMaster_Result> spGetCountsForDashboardMaster(Nullable<System.DateTime> pointInTime, string programFKs, Nullable<int> hubFK, Nullable<int> stateFK)
        {
            var pointInTimeParameter = pointInTime.HasValue ?
                new ObjectParameter("PointInTime", pointInTime) :
                new ObjectParameter("PointInTime", typeof(System.DateTime));
    
            var programFKsParameter = programFKs != null ?
                new ObjectParameter("ProgramFKs", programFKs) :
                new ObjectParameter("ProgramFKs", typeof(string));
    
            var hubFKParameter = hubFK.HasValue ?
                new ObjectParameter("HubFK", hubFK) :
                new ObjectParameter("HubFK", typeof(int));
    
            var stateFKParameter = stateFK.HasValue ?
                new ObjectParameter("StateFK", stateFK) :
                new ObjectParameter("StateFK", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCountsForDashboardMaster_Result>("spGetCountsForDashboardMaster", pointInTimeParameter, programFKsParameter, hubFKParameter, stateFKParameter);
        }
    
        public virtual ObjectResult<rspBIRExcel_ChildrenAndBIRs_Result> rspBIRExcel_ChildrenAndBIRs(string programFKs, Nullable<System.DateTime> schoolYear)
        {
            var programFKsParameter = programFKs != null ?
                new ObjectParameter("ProgramFKs", programFKs) :
                new ObjectParameter("ProgramFKs", typeof(string));
    
            var schoolYearParameter = schoolYear.HasValue ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rspBIRExcel_ChildrenAndBIRs_Result>("rspBIRExcel_ChildrenAndBIRs", programFKsParameter, schoolYearParameter);
        }
    
        public virtual ObjectResult<spGetBehaviorIncidentCountByProblemBehavior_Result> spGetBehaviorIncidentCountByProblemBehavior(string programFKs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var programFKsParameter = programFKs != null ?
                new ObjectParameter("ProgramFKs", programFKs) :
                new ObjectParameter("ProgramFKs", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBehaviorIncidentCountByProblemBehavior_Result>("spGetBehaviorIncidentCountByProblemBehavior", programFKsParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spGetChildrenCountByRace_Result> spGetChildrenCountByRace(string programFKs, Nullable<System.DateTime> pointInTime)
        {
            var programFKsParameter = programFKs != null ?
                new ObjectParameter("ProgramFKs", programFKs) :
                new ObjectParameter("ProgramFKs", typeof(string));
    
            var pointInTimeParameter = pointInTime.HasValue ?
                new ObjectParameter("PointInTime", pointInTime) :
                new ObjectParameter("PointInTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetChildrenCountByRace_Result>("spGetChildrenCountByRace", programFKsParameter, pointInTimeParameter);
        }
    
        public virtual ObjectResult<spGetASQSEsByScoreType_Result> spGetASQSEsByScoreType(string programFKs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var programFKsParameter = programFKs != null ?
                new ObjectParameter("ProgramFKs", programFKs) :
                new ObjectParameter("ProgramFKs", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetASQSEsByScoreType_Result>("spGetASQSEsByScoreType", programFKsParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spGetOtherSEScreensByScoreType_Result> spGetOtherSEScreensByScoreType(string programFKs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var programFKsParameter = programFKs != null ?
                new ObjectParameter("ProgramFKs", programFKs) :
                new ObjectParameter("ProgramFKs", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOtherSEScreensByScoreType_Result>("spGetOtherSEScreensByScoreType", programFKsParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spGetUserCustomizationOptions_Result> spGetUserCustomizationOptions(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserCustomizationOptions_Result>("spGetUserCustomizationOptions", usernameParameter);
        }
    }
}
